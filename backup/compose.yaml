# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    #build:
    #  context: .
    #  target: final
    image: philippecharriere494/accelerate:0.1.0
    environment:
      - MESSAGE=üéâ Hello from üê≥ Compose üëã
      - REDIS_URL=redis-server:6379
    ports:
      - 8080:8080
    develop:
      watch:
        - action: sync
          path: ./public
          target: /app/public
        - action: rebuild
          path: ./Dockerfile
        - action: rebuild
          path: ./main.go

  redis-server:
    image: redis:7.2.4
    environment: 
      - REDIS_ARGS=--save 30 1
    volumes:
      - redis-data:/data
    ports:
      - 6379:6379

volumes:
  redis-data:


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

